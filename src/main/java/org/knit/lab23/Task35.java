package org.knit.lab23;

import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;

public class Task35 {
    /* –ó–∞–¥–∞—á–∞ 10: –ì–æ–Ω–∫–∞ –±–µ–≥—É–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CyclicBarrier üèÉ‚Äç‚ôÇÔ∏èüèÉ‚Äç‚ôÄÔ∏è
    * –ì—Ä—É–ø–ø–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–±–µ–≥–µ. –û–¥–Ω–∞–∫–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–æ–Ω–∫–∏ –≤—Å–µ –¥–æ–ª–∂–Ω—ã —Å–æ–±—Ä–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ.
    * –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã, –∑–∞–±–µ–≥ –Ω–∞—á–Ω—ë—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CyclicBarrier,
    * —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ –≥–æ–Ω–∫–∏.
    * –ö–∞–∂–¥—ã–π –±–µ–≥—É–Ω —Å—Ç–∞—Ä—Ç—É–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –∑–∞—Ç–µ–º –±–µ–∂–∏—Ç —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è (—Å–∏–º—É–ª–∏—Ä—É–µ—Ç—Å—è Thread.sleep),
    * –ø–æ—Å–ª–µ —á–µ–≥–æ —Ñ–∏–Ω–∏—à–∏—Ä—É–µ—Ç. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ –±–µ–≥—É–Ω—ã –∑–∞–≤–µ—Ä—à–∞—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏—é, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ
    * –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–Ω–∫–∏.*/

    /*RUNNERSCOUNT –±–µ–≥—É–Ω–æ–≤ –≥–æ—Ç–æ–≤—è—Ç—å—Å—è –∫ —Å—Ç–∞—Ä—Ç—É, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–±–µ–≥. –ù–∞ —Ñ–∏–Ω–∏—à–µ –≤—Å–µ –±–µ–≥—É–Ω—ã
    * –¥–æ–∂–∏–¥–∞—é—Ç—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–Ω–∫–∏.*/

    static final int RUNNERSCOUNT = 5;

    public static void execute() {

        AtomicBoolean runstarted = new AtomicBoolean(false);
        AtomicBoolean isEveryoneAlive = new AtomicBoolean(true);

        CyclicBarrier barrier = new CyclicBarrier(RUNNERSCOUNT, () -> {
            if (!runstarted.get()) {
                System.out.println("–°—Ç–∞—Ä—Ç –∑–∞–±–µ–≥–∞");
                runstarted.set(true);
            }
            else {
                System.out.println("–ö–æ–Ω–µ—Ü –∑–∞–±–µ–≥–∞");
                runstarted.set(false);
            }
        });
        try (ExecutorService executor = Executors.newFixedThreadPool(RUNNERSCOUNT)) {
            for (int i = 1; i <= RUNNERSCOUNT; i++) {
                executor.submit(new Runner(i, barrier, isEveryoneAlive));
            }
            executor.shutdown();
        }

    }
}
